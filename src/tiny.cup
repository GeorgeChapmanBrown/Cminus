/*
  Created by: Fei Song
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }

            m.append(" (" + s.toString() + ")");
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal String IF, INT, RETURN, VOID, WHILE, ELSE;
terminal String PLUS, MINUS, MULT, DIV;
terminal String LESS_THAN, LESS_THAN_EQUAL, GREATER_THAN, GREATER_THAN_EQUAL, EQUAL, NOT_EQUAL, ASSIGN;
terminal String SEMICOLON, COMMA;
terminal String LBRACKET, RBRACKET, LSQUARE_BRACKET, RSQUARE_BRACKET, LCURLY_BRACKET, RCURLY_BRACKET;
terminal String ID; 
terminal Integer NUM;

non terminal Absyn program;
non terminal DecList declaration_list;
non terminal Dec declaration;
non terminal VarDec var_declaration;
non terminal FunctionDec fun_declaration;

non terminal VarDecList param_list, local_declarations;
non terminal VarDec param;
non terminal CompoundExp compound_stmt;

non terminal IfExp selection_stmt; 
non terminal WhileExp iteration_stmt; 
non terminal ReturnExp return_stmt; 
non terminal Var var;

non terminal OpExp arithmetic_expression, simple_expression;
non terminal Integer addop, mulop, relop;
non terminal NameTy type_specifier;
non terminal Exp expression, factor, statement, expression_stmt;
non terminal CallExp call;
non terminal ExpList arg_list, statement_list;


/*If no other rules are satisfied, it is an error*/
precedence left error;

/*Multiply before adding*/
precedence left PLUS, MINUS;
precedence left MULT, DIV;

/*Assignments before comparison*/
precedence nonassoc LESS_THAN, LESS_THAN_EQUAL, GREATER_THAN, GREATER_THAN_EQUAL, EQUAL, NOT_EQUAL;

/*Brackets first*/
precedence left SEMICOLON, COMMA;
precedence left LBRACKET, RBRACKET, LSQUARE_BRACKET, RSQUARE_BRACKET, LCURLY_BRACKET, RCURLY_BRACKET;

/*Else-if statements before if statements without else*/
precedence left INT, RETURN, VOID, WHILE;
precedence right IF;
precedence right ELSE;

/* ----------------------------Grammar Section-------------------- */
   
program ::= declaration_list:s1 
        {:  RESULT = s1;
            System.out.println( "The abstract syntax tree is:" );
            Absyn.showTree( RESULT, 0 );
        :}
        ;

declaration_list    ::= declaration:s1 declaration_list:s2 {: RESULT = new DecList(s1, s2); :}
                    |  declaration:s1 {:  :}
                    ;

declaration ::= var_declaration:s1 {: RESULT = s1; :}
            |  fun_declaration:s1 {: RESULT = s1; :}
            ;

var_declaration ::= type_specifier:s1 ID:s2 SEMICOLON {: RESULT = new SimpleDec(s1left, s1, s2); :}
                | type_specifier:s1 ID:s2 LSQUARE_BRACKET NUM:s3 RSQUARE_BRACKET SEMICOLON {: RESULT = new ArrayDec(s1left, s1, s2, new IntExp(s3left, s3)); :}
                | error:i SEMICOLON {: System.out.println("Error starting on line " + ileft + ": invalid statement"); :}
                ;

type_specifier  ::= INT:s1 {: RESULT = new NameTy(s1left, NameTy.INT); :}
                | VOID:s1 {: RESULT = new NameTy(s1left, NameTy.VOID); :}
                ;

fun_declaration ::= type_specifier:s1 ID:s2 LBRACKET param_list:s3 RBRACKET compound_stmt:s4 {: RESULT = new FunctionDec(s1left, s1, s2, s3, 
s4); :}
                | type_specifier:s1 ID:s2 LBRACKET VOID RBRACKET compound_stmt:s3 {: RESULT = new FunctionDec(s1left, s1, s2, null, 
s3); :}
                ;

param_list  ::= param:s1 COMMA param_list:s2 {: RESULT = new VarDecList(s1, s2); :}
            | /*Empty*/ {: :}
            ;

param   ::= type_specifier:s1 ID:s2 {: RESULT = new SimpleDec(s1left, s1, s2); :}
        |  type_specifier:s1 ID:s2 LSQUARE_BRACKET RSQUARE_BRACKET {: new SimpleDec(s1left, s1, s2); :}
        ;

compound_stmt   ::= LCURLY_BRACKET:i local_declarations:s1 statement_list:s2 RCURLY_BRACKET {: RESULT = new CompoundExp(ileft, s1, s2); :}
                | LCURLY_BRACKET:i error RCURLY_BRACKET {: System.out.println("Error on line " + ileft + ": invalid statement"); :}
                ;

local_declarations  ::= var_declaration:s1 local_declarations:s2 {: RESULT = new VarDecList(s1, s2); :}
                    | /*Empty*/ {: :}
                    ;

statement_list  ::= statement:s1 statement_list:s2 {: RESULT = new ExpList(s1, s2);:}
                | /*Empty*/ {: :}
                ;

statement   ::= expression_stmt:s1 {: RESULT = s1; :}
            | compound_stmt:s1 {: RESULT = s1; :}
            | selection_stmt:s1 {: RESULT = s1; :}
            | iteration_stmt:s1 {: RESULT = s1; :}
            | return_stmt:s1 {: RESULT = s1; :}
            ;

expression_stmt ::= expression:s1 SEMICOLON {: RESULT = s1; :}
                | error:i SEMICOLON {: System.out.println("Error on line " + ileft + ": invalid expression"); :}
                | SEMICOLON {: :}
                ;

selection_stmt  ::= IF:i LBRACKET expression:s1 RBRACKET statement:s2 {:RESULT = new IfExp(ileft, s1, s2, null);:}
                |  IF:i LBRACKET expression:s1 RBRACKET statement:s2 ELSE statement:s3 {:RESULT = new IfExp(ileft, s1, s2, s3); :}
                ;

iteration_stmt  ::= WHILE:i LBRACKET expression:s1 RBRACKET statement:s2 {:RESULT = new WhileExp(ileft, s1, s2); :}
                ;

return_stmt ::= RETURN:i SEMICOLON {:RESULT=new ReturnExp(ileft, new NilExp(ileft)); :}
            | RETURN:i error SEMICOLON {: System.out.println("Error on line " + ileft + ": invalid return");  :} /*error condition*/
            | RETURN:i expression:s1 {: RESULT = new ReturnExp(ileft, s1); :}
            ;

expression  ::= var:s1 ASSIGN expression:s2 {: RESULT = new AssignExp(s1left, s1, s2); :}
            | simple_expression:s1 {: RESULT = s1; :} 
            ;

var ::= ID:s1 {:RESULT = new SimpleVar(s1left, s1); :}
    | ID:s1 LSQUARE_BRACKET expression:s2 RSQUARE_BRACKET {: RESULT = new IndexVar(s1left, s1, s2); :}
    ;

simple_expression   ::= arithmetic_expression:s1 relop:s2 arithmetic_expression:s3 {:RESULT = new OpExp(s1left, s1, s2, s3); :}
                    |  arithmetic_expression:s1 {: RESULT = s1; :}
                    ;

relop   ::= LESS_THAN_EQUAL {:RESULT=6/*OpExp.LE*/; :}
        | LESS_THAN {:RESULT=5/*OpExp.LT*/; :}
        | GREATER_THAN {:RESULT=7/*OpExp.GT*/; :}
        | GREATER_THAN_EQUAL {:RESULT=8/*OpExp.GE*/; :}
        | EQUAL {: RESULT=4/*OpExp.EQ*/;:}
        | NOT_EQUAL {:RESULT=9/*OpExp.NE*/; :}
        ;

/*Minimized from additive-expression*/
arithmetic_expression   ::= arithmetic_expression:s1 addop:s2 arithmetic_expression:s3 {: RESULT = new OpExp(s1left, s1, s2, s3); :}
                        | arithmetic_expression:s1 mulop:s2 arithmetic_expression:s3 {: RESULT = new OpExp(s1left, s1, s2, s3); :}
                        | factor:s1 {: :}
                        ;

addop   ::= PLUS {:RESULT=0/*OpExp.PLUS*/; :}
        | MINUS {:RESULT=1/*OpExp.MINUS*/; :}
        ;

mulop   ::= MULT {:RESULT=2/*OpExp.MULT*/;  :}
        | DIV {:RESULT=3/*OpExp.DIV*/;  :}
        ;

factor  ::= LBRACKET expression:s1 RBRACKET {: RESULT = s1; :}
        | var:s1 {: RESULT = new VarExp(s1left, s1);:}
        | call:s1 {: RESULT = s1; :}
        | NUM:s1 {: RESULT = new IntExp(s1left, s1);:}
        ;

call    ::= ID:s1 LBRACKET arg_list:s2 RBRACKET {: RESULT = new CallExp(s1left, s1, s2); :}
        | ID:s1 LBRACKET RBRACKET {: RESULT = new CallExp(s1left, s1, null); :}
        ;

arg_list    ::= expression:s1 COMMA arg_list:s2 {: RESULT = new ExpList(s1, s2); :}
            | /*Empty*/ {: :}
            ;

